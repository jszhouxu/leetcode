Binary Tree Inorder Traversal  


Description: 

Given a binary tree, return the inorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,3,2]
Follow up: Recursive solution is trivial, could you do it iteratively?




Solution:

先去看了一下inorder traversal的定义，然后想到自我调用，先把所有node.left给写出来，然后node，然后node.right。
有一个follow up说Recursive solution is trivial, could you do it iteratively? 只要root不为空，我就一直遍历root的最底部左边，同时把这些遍历痕迹存储起来，把最底部左边的元素读出来之后，判断右边是否还有二叉树，有就继续，没有就回到遍历痕迹的上一位，即上一个二叉母树。





Code:

class Solution:
    def inorderTraversal(self, root: TreeNode) -> List[int]:
        '''
        if not root:
            return []
        else:
            return self.inorderTraversal(root.left)+[root.val]+self.inorderTraversal(root.right)
            '''
        res,temp=[],[]
        while 1:
            while root:
                temp.append(root)
                root=root.left
            if not temp:return res
            root=temp.pop()
            res.append(root.val)
            root=root.right