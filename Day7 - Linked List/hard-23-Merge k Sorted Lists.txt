Merge k Sorted Lists


Description: 

Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

Example:

Input:
[
  1->4->5,
  1->3->4,
  2->6
]
Output: 1->1->2->3->4->4->5->6





Solution:

可以分解成今天的第一题合并两个有顺序的链表，递归做。
如果本题原链表为空，返回空，长度为1，返回原链表，长度超过1，将列表分成两部分，分别合并两部分，如果合并后还是有多个，继续二分并合并。





Code:

class Solution:
    def mergeKLists(self, lists: List[ListNode]) -> ListNode:
        #'''
        if not lists: return
        n = len(lists)
        if n == 1: return lists[0]
        mid = n//2
        left = self.mergeKLists(lists[:mid])
        right = self.mergeKLists(lists[mid:])
        
        return self.mergeTwoLists(left,right)
    
    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:
        head = new_list = ListNode(float("-inf"))
        while l1 and l2:
            if l1.val < l2.val:
                new_list.next = l1
                l1 = l1.next
                new_list = new_list.next
            else:
                new_list.next = l2
                l2 = l2.next
                new_list = new_list.next
        new_list.next = l1 or l2
        return head.next