Divide Two Integers


Description: 

Given two integers dividend and divisor, divide two integers without using multiplication, division and mod operator.

Return the quotient after dividing dividend by divisor.

The integer division should truncate toward zero, which means losing its fractional part. For example, truncate(8.345) = 8 and truncate(-2.7335) = -2.

Example 1:

Input: dividend = 10, divisor = 3
Output: 3
Explanation: 10/3 = truncate(3.33333..) = 3.
Example 2:

Input: dividend = 7, divisor = -3
Output: -2
Explanation: 7/-3 = truncate(-2.33333..) = -2.
Note:

Both dividend and divisor will be 32-bit signed integers.
The divisor will never be 0.
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 231 − 1 when the division result overflows.





Solution:

首先确定符号，然后把除数和被除数都转化为绝对值，只要除数大于等于被除数，就一直减掉被除数，同时商加1。一个简便的方法是可以用左移指令做，快速算出商。最后给商赋符号，同时判断商是否超界。




Code:

class Solution:
    def divide(self, dividend: int, divisor: int) -> int:
        sign = (dividend < 0) ^ (divisor < 0)
        dividend = abs(dividend)
        divisor = abs(divisor)
        res = 0
        
        while dividend >= divisor:
            temp = divisor
            m = 1
            while (temp << 1) <= dividend:
                temp <<= 1
                m <<= 1
            dividend -= temp
            res += m
        if not sign:
            return res if res <= 2**31-1 else 2**31-1
        else:
            return -res if -res >= -2**31 else -2**31
