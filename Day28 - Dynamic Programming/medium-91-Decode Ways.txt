Decode Ways


Description: 

A message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Given a non-empty string containing only digits, determine the total number of ways to decode it.

Example 1:

Input: "12"
Output: 2
Explanation: It could be decoded as "AB" (1 2) or "L" (12).
Example 2:

Input: "226"
Output: 3
Explanation: It could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2 6).





Solution:

遍历整个数组，对每个数字首先判断其是否为0，若是则将dp[i]赋为0，若不是，赋上dp[i-1]的值，然后看数组前一位是否存在，如果存在且满足前一位是1，或者和当前位一起组成的两位数不大于 26，则当前dp[i]值加上dp[i - 2]。最终返回dp数组的最后一个值即可。





Code:

class Solution:
    def numDecodings(self, s: str) -> int:
        count, store = 0, {}
        def helper(s):
            nonlocal count
            if not s: count += 1
            elif s[0] == "0": pass
            elif s in store: count += store[s]
            else:
                helper(s[1:])
                if len(s) >= 2 and int(s[:2]) < 27: helper(s[2:])
                store[s] = count   
        helper(s)
        return count