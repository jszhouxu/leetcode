Search in Rotated Sorted Array


Description: 

Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Your algorithm's runtime complexity must be in the order of O(log n).

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1





Solution:

由于不知道数组被twist成什么样子了，所以分条件写。不管怎样，都将数组分成一半的概念快速寻找，所以取三个指针，start, middle和end。
如果middle指向的值为目标值，返回middle。
如果start指向的值小于等于middle指向的值，说明数组前半部分升序，如果target在这之间，end = middle继续二分，不然start=middle+1继续二分。
如果start指向的值大于middle指向的值，说明数组前半部分已经被twist，后半部分升序排列，如果target>middle指向的值且小于start指向的值，则middle=start+1继续二分，不然end=middle继续二分。
如果middle=start=end，无该元素，返回-1





Code:

class Solution:
    def search(self, nums: List[int], target: int) -> int:
        start = 0
        end = len(nums) - 1
        while(start<=end):
            mid = (start+end)//2
            # found the element
            if nums[mid] == target:
                return mid
            # could not find the element
            elif (start == mid and mid == end):
                return -1
            # start is less than mid
            elif nums[start] <= nums[mid]:
                if nums[start] <= target <= nums[mid]:
                    end = mid
                else:
                    start = mid +1
            else: # nums[start] > nums[mid]
                if nums[mid] < target < nums[start]:
                    start = mid+1
                else:
                    end = mid
        return -1
    