Next Permutation


Description: 

Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.

If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).

The replacement must be in-place and use only constant extra memory.

Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.

1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1





Solution:

一开始没理解Permutation的具体意义，做错了。后来知道permutation的含义之后重新写了一遍，正确。
双指针，第一个指针负责找数组中第一对升序的元素对中的较小元素，第二个指针负责找第一个指针之后的所有数组元素中与其最接近的一个元素。注意两个指针都是从数组后面往前遍历，所以第二个指针只要找到第一个大于指针1所指向的元素值的位置即可进行位置交换并倒序排序指针1之后的数组，这样才符合permutation的定义。





Code:

class Solution:
    def nextPermutation(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        l = len(nums)
        if l > 1:
            i,j = l-2, l-1
            while i>=0:
                if nums[i]>=nums[i+1]:
                    i = i - 1
                else:
                    break
            if i == -1:
                nums[:] = nums[::-1]
            else:
                while j>=0:
                    if nums[i]>=nums[j]:
                        j = j -1
                    else:
                        nums[i], nums[j] = nums[j],nums[i]
                        nums[i+1:] = nums[i+1:][::-1]
                        break
