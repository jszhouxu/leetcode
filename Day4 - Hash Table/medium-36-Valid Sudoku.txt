Combination Sum  


Description: 

Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the 9 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition.
The Sudoku board could be partially filled, where empty cells are filled with the character '.'.

Example 1:

Input:
[
  ["5","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
Output: true
Example 2:

Input:
[
  ["8","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
Output: false
Explanation: Same as Example 1, except with the 5 in the top left corner being 
    modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.
Note:

A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.
The given board contain only digits 1-9 and the character '.'.
The given board size is always 9x9.




Solution:

这题完全没头绪，看了答案。建立3个hash表，分别为横向，纵向和9宫格表，遍历整个sudoku，如果当前元素不为'.'，那么判断当前元素是否在3个hash表中，如在，返回fasle，如不在，加入对应的hash表中。





Code:

class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        '''three hash maps for checking condition'''
        check_dict_x ={}
        check_dict_y = {}
        check_dict_box = {}
        
        '''initializing hasmaps to empty lists for 9 rows and 9 columns'''
        for i in range(9):
            check_dict_x[i] = []
            check_dict_y[i] = []
            
        '''initializing hashmaps to empty lists for 9 boxes
        (0,0), (0,1), (0,2), (1,0), (1,1), (1,2), (2,0), (2,1), (2,2)'''
        for i in range(3):
            for j in range(3):
                check_dict_box[(i,j)] = []
                
        for i in range(9):
            for j in range(9):
                if board[i][j] != '.':
                    '''check existance of current element in previous ones'''
                    if board[i][j] not in check_dict_x[i]:
                        '''if not then add them to list'''
                        check_dict_x[i].append(board[i][j])
                    else:
                        return False
                    '''integer division by 3 of coordinates to map boxes to coordinates
                    eg: (6//2, 6//2) to (8//3, 8//3) -> (2,2)'''
                    if board[i][j] not in check_dict_box[(i//3,j//3)]: 
                        check_dict_box[(i//3,j//3)].append(board[i][j])
                    else:
                        return False
                if board[j][i] != '.':
                    '''check existance of current element in previous ones'''
                    if board[j][i] not in check_dict_y[i] or board[j][i] == '.':
                        '''if not then add them to list'''
                        check_dict_y[i].append(board[j][i])
                    else:
                        return False

        return True