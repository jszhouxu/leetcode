Sort Colors


Description: 

Given an array with n objects colored red, white or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white and blue.

Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.

Note: You are not suppose to use the library's sort function for this problem.

Example:

Input: [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Follow up:

A rather straight forward solution is a two-pass algorithm using counting sort.
First, iterate the array counting number of 0's, 1's, and 2's, then overwrite array with total number of 0's, then 1's and followed by 2's.
Could you come up with a one-pass algorithm using only constant space?




Solution:

设三个指针，left指向开头，right指向结尾，i从开头遍历到结尾，遍历到任意一个元素，如果它为0，将其和left指向的元素进行互换，left+1且i+1，如果它为2，将其和right指向的元素进行互换，right-1，其他情况i+1，继续遍历下一个元素。





Code:

class Solution:
    def sortColors(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        left, right = 0, len(nums)-1
        i = 0
        while i <= right:
            if nums[i] == 0:
                temp = nums[left]
                nums[left] =0
                nums[i] = temp
                left = left + 1
                i = i + 1
            elif nums[i] == 2:
                temp = nums[right]
                nums[right] = 2
                nums[i] = temp
                right = right - 1
            else:
                i = i + 1