Subsets


Description: 

Given a set of distinct integers, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.

Example:

Input: nums = [1,2,3]
Output:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]





Solution:

首先建立一个字典保存每个数字所代表的字符串，用变量level记录当前生成的字符串的字符个数，然后递归，首先判断level，如果跟digits中数字的个数相等了，将当前的组合加入结果res中返回。我们通过digits中的数字到dict中取出字符串，然后遍历这个取出的字符串，将每个字符都加到当前的组合后面，并调用递归函数即可。




Code:

class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        if digits == "": return []
        
        graph = {'2':['a','b','c'], '3':['d','e','f'], '4':['g','h','i'], '5':['j','k','l'], '6':['m','n','o'], '7':['p','q','r','s'], '8':['t','u','v'], '9':['w','x','y','z']}
        
        """ Turn digits in to list of char list """
        chars = []
        for c in digits:
            chars.append(graph[c])
            
        """ Start with "" to concatenate """
        ans = [""]
        for i in range(len(chars)):
            ans=[c+chars[i][j] for c in ans for j in range(len(chars[i]))]
            
        return ans