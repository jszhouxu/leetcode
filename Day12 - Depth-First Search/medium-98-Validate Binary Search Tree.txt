Validate Binary Search Tree


Description: 

Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 

Example 1:

    2
   / \
  1   3

Input: [2,1,3]
Output: true
Example 2:

    5
   / \
  1   4
     / \
    3   6

Input: [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.





Solution:

用递归遍历所有的节点值，遍历到一个新节点时和其上一个节点比较，如果不大于上一个节点那么则返回 false，全部遍历完成后返回 true。




Code:

class Solution:
    def isValidBST(self, root: TreeNode) -> bool:
        if root == None:
            return True
        self.min = -(math.inf)
        return self.helper(root)
    
    def helper(self,root):
        if root:
            x = self.helper(root.left)
            if self.min < root.val:
                self.min = root.val
            else:
                return False
            y = self.helper(root.right)
            return x and y
        else:
            return True
    
        