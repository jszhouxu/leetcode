Recover Binary Search Tree 


Description: 

Two elements of a binary search tree (BST) are swapped by mistake.

Recover the tree without changing its structure.

Example 1:

Input: [1,3,null,null,2]

   1
  /
 3
  \
   2

Output: [3,1,null,null,2]

   3
  /
 1
  \
   2
Example 2:

Input: [3,1,4,null,null,2]

  3
 / \
1   4
   /
  2

Output: [2,1,4,null,null,3]

  2
 / \
1   4
   /
  3
Follow up:

A solution using O(n) space is pretty straight forward.
Could you devise a constant space solution?






Solution:

这题还是没完全理解，需要再进一步理解一下Morris遍历。在Morris遍历的基础上，在拆桥的过程中判断第一次出现降序和第二次出现降序的两个元素（利用first，second和prev三指针），然后交换。





Code:

class Solution:
    def recoverTree(self, root: TreeNode) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        prev = None
        first = None
        second = None
        while root:
            if root.left:
                buf = root.left
                while buf.right != root and buf.right:
                    buf = buf.right
                if not buf.right:
                    buf.right = root
                    root = root.left
                else:
                    if prev and prev.val > root.val:
                        if not first:
                            first = prev
                        second = root
                    prev = root
                    buf.right = None
                    root = root.right
            else:
                if prev and prev.val > root.val:
                    if not first:
                        first = prev
                    second = root
                prev = root
                root = root.right

        if first:
            first.val, second.val = second.val, first.val