Copy List with Random Pointer


Description: 

Given an array of strings, group anagrams together.

Example:

Input: ["eat", "tea", "tan", "ate", "nat", "bat"],
Output:
[
  ["ate","eat","tea"],
  ["nat","tan"],
  ["bat"]
]
Note:

All inputs will be in lowercase.
The order of your output does not matter.





Solution:

这题一开始没看懂，深度复制链表和之前的链表不是一样的吗？只要遍历赋值就可以了。
后来看了其他解释，原来难点在于如何处理随机指针的问题。如果在每生成一个新节点给其随机指针赋值时，都要去遍历原链表的话，OJ 上肯定会超时，所以可以考虑用 HashMap 来缩短查找时间，第一遍遍历生成所有新节点时同时建立一个原节点和新节点的 HashMap，第二遍给随机指针赋值时，查找时间是常数级。





Code:

class Solution:
    def copyRandomList(self, head: 'Node') -> 'Node':
        if head is None: return None
        deepcopy = {}
        cur = head
        while cur:
            deepcopy[cur] = Node(cur.val,None,None)
            cur = cur.next
        cur = head
        while cur:
            if cur.next:
                deepcopy[cur].next = deepcopy[cur.next]
            if cur.random:
                deepcopy[cur].random = deepcopy[cur.random]
            cur = cur.next
        return deepcopy[head]