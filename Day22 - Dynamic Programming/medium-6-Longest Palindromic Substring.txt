Longest Palindromic Substring


Description: 

Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.

Example 1:

Input: "babad"
Output: "bab"
Note: "aba" is also a valid answer.
Example 2:

Input: "cbbd"
Output: "bb"





Solution:

参考答案，从中心向外扩散，将子串长度分为奇数和偶数的情况，遍历每个除最后一个位置的字符index，如果为奇数，初始下限=初始上限=index，上下限均不超过原字符串的上下限；判断上下限处的字符是否相等，相等则上下限各加1，如果为偶数，初始上限=初始下限+1=index+1），每次上下限的字符相等时，都将当前最长的回文子串长度与上下限之差+1比较。后者大时，将最长的回文子串改为上下限之间的；   重复直到上下限之差等于原字符串长度或者遍历到最后一个字符，取当前截取到的回文子串，该子串即为最长的回文子串。




Code:

class Solution:
    def longestPalindrome(self, s: str) -> str:
        p = ''
        for i in range(len(s)):
            p1 = self.get_palindrome(s, i, i+1)
            p2 = self.get_palindrome(s, i, i)
            p = max([p, p1, p2], key=lambda x: len(x))
        return p
    
    def get_palindrome(self, s: str, l: int, r: int) -> str:
        while l >= 0 and r < len(s) and s[l] == s[r]:
            l -= 1
            r += 1
        return s[l+1:r]