Median of Two Sorted Arrays  


Description: 

There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

You may assume nums1 and nums2 cannot be both empty.

Example 1:

nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:

nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5





Solution:

直觉的思路：可以直接把两个数组合并，之后排序，对排序后的合并数组判断长度奇偶来算中位数。
题目要求是time complexity should be O(log (m+n))，因为我直接调用了python中的sort函数来排序，不确定我的时间复杂度是不是O(log(m+n))。
此题先待定





Code:

class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        if len(nums2)<len(nums1):
            temp = nums2
            nums2 = nums1
            nums1 = temp
        start1,end1 = 0, len(nums1)
        start2,end2 = 0, len(nums2)
        notFound = True
        part1 = int(end1/2)
        part2 = int((end1+end2+1)/2)-part1

        while notFound:
            leftMax1 = max(nums1[0:part1],default = -999_999_999)
            leftMax2 = max(nums2[0:part2],default = -999_999_999)
            rightMin1 = min(nums1[part1:],default = 999_999_999)
            rightMin2 = min(nums2[part2:],default = 999_999_999)
            
            if leftMax1 <= rightMin2 and leftMax2 <= rightMin1:
                notFound = False
                if (end1+end2)%2 ==1:
                    return float(max(leftMax1,leftMax2))
                else:
                    return float((max(leftMax1,leftMax2)+min(rightMin1,rightMin2))/2)
            else:
                if leftMax1 > rightMin2:
                    part1 -= 1
                    part2 += 1
                if leftMax2 > rightMin1:
                    part1 += 1
                    part2 -= 1
        return 0.0