3Sum   


Description: 

Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note:

The solution set must not contain duplicate triplets.

Example:

Given array nums = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]





Solution:

隐约感觉可以转化为two_sum，类似于用DP的思想做，但是想了15分钟还是没想出来怎么做，后看了讨论区中的答案。
还是自我调用two_sum，先将原数组排序，然后遍历排序后的数组，对每个元素被0减的差值作为two_sum的target sum。
两个注意点：1. 调用two_sum时，在当前元素之后的数组进行寻找；2. 重复元素不再处理，否则结果会重复。





Code:

class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        results = []
        nums_set = set()
        nums.sort()
        for i, num in enumerate(nums):
            if num in nums_set:
                continue
            two_sum_res = self.two_sums(nums[i+1:], -1*num)
            three_sum_res = [[num,res[0],res[1]] for res in two_sum_res]
            results.extend(three_sum_res)
            nums_set.add(num)
        return results
    
    def two_sums(self,nums:List[int],target:int)->List[List[int]]:
        results = []
        sum_map = {}
        sum_set = set()
        for n in nums:
            if n in sum_map and n not in sum_set:
                sum_set.update([sum_map[n],n])
                results.append([sum_map[n],n])
            sum_map[target-n] = n
        return results

    
    