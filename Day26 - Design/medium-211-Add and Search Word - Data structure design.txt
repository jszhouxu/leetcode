Add and Search Word - Data structure design


Description: 

Design a data structure that supports the following two operations:

void addWord(word)
bool search(word)
search(word) can search a literal word or a regular expression string containing only letters a-z or .. A . means it can represent any one letter.

Example:

addWord("bad")
addWord("dad")
addWord("mad")
search("pad") -> false
search("bad") -> true
search(".ad") -> true
search("b..") -> true
Note:
You may assume that all words are consist of lowercase letters a-z.





Solution:

初始建立一个名为words的dictionary，addWord时，以被加入word的长度为index加入，这样搜寻的时候，可以直接将长度中的任意位替换为.，检查剩下的位是否和dictionary里面现有单词一致，如果完全不一致，返回False，否则就返回True。





Code:

class WordDictionary:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.words = defaultdict(set)
        

    def addWord(self, word: str) -> None:
        """
        Adds a word into the data structure.
        """
        self.words[len(word)].add(word)
        

    def search(self, word: str) -> bool:
        """
        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.
        """
        for other in self.words[len(word)]:
            any_mismatch = any(word[x] != '.' and word[x] != other[x] for x in range(len(word)))
            if not any_mismatch:
                return True
        return False


# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)