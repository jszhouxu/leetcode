Implement Trie (Prefix Tree)


Description: 

Implement a trie with insert, search, and startsWith methods.

Example:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true
Note:

You may assume that all inputs are consist of lowercase letters a-z.
All inputs are guaranteed to be non-empty strings.





Solution:

Design类的题目不确定是不是结合数据结构一起的。参考答案，定义两个self变量isWord（默认为false）和children（空字典）。插入函数：对所需插入的单词进行遍历，如果不在children里面，就跳出，如果在，就把节点指向对应的children，同时对应的isWord变为True。搜寻函数：同样遍历所有单词，如果不在对应的children里面，直接返回False，否则指向对应的children，返回对应的isWord。Startwith函数：同样遍历所有单词，如果不在对应的children里面，直接返回False，否则指向对应的children，返回True。




Code:

class Trie:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.isWord = False
        self.children = {}
        

    def insert(self, word: str) -> None:
        """
        Inserts a word into the trie.
        """
        node = self
        for w in word:
            if w not in node.children:
                node.children[w] = Trie()
            node = node.children[w]
        
        node.isWord = True
        # Mark it as an independent word

    def search(self, word: str) -> bool:
        """
        Returns if the word is in the trie.
        """
        node = self
        for w in word:
            if w not in node.children:
                return False
            node = node.children[w]
        
        return node.isWord
        

    def startsWith(self, prefix: str) -> bool:
        """
        Returns if there is any word in the trie that starts with the given prefix.
        """
        node = self
        for w in prefix:
            if w not in node.children:
                return False
            node = node.children[w]
        
        return True
        


# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)