Flatten Binary Tree to Linked List


Description: 

Given a binary tree, flatten it to a linked list in-place.

For example, given the following tree:

    1
   / \
  2   5
 / \   \
3   4   6
The flattened tree should look like:

1
 \
  2
   \
    3
     \
      4
       \
        5
         \
          6





Solution:

将左右子树分别平化为链表（此处可用递归），顺序分别为左子树的先序遍历和右子树的先序遍历，然后将左子树链表插入到根节点和右子树链表之间即可。




Code:

class Solution:
    def flatten(self, root: TreeNode) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        if root == None:
            return None
        self.flatten(root.left)
        self.flatten(root.right)
        p = root
        if p.left == None:
            return None
        p = p.left
        while p.right:
            p = p.right
        p.right = root.right
        root.right = root.left
        root.left = None