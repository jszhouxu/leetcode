Binary Tree Maximum Path Sum


Description: 

Given a non-empty binary tree, find the maximum path sum.

For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.

Example 1:

Input: [1,2,3]

       1
      / \
     2   3

Output: 6
Example 2:

Input: [-10,9,20,null,null,15,7]

   -10
   / \
  9  20
    /  \
   15   7

Output: 42






Solution:

用递归做。如果当前结点为空，直接返回0。否则就分别对左右子节点递归，在取路径的时候把当前的路径和和0做比较，如果大于0，那么就取当前路径和，不然就取0。然后来更新全局最大值结果res，就是以左子结点为终点的最大path之和加上以右子结点为终点的最大path之和，还要加上当前结点值，这样就组成了一个条完整的路径。而返回值是取 left 和 right 中的较大值加上当前结点值，因为返回值的定义是以当前结点为终点的 path 之和，所以只能取 left 和 right 中较大的那个值。





Code:

class Solution:
    def recoverTree(self, root: TreeNode) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        prev = None
        first = None
        second = None
        while root:
            if root.left:
                buf = root.left
                while buf.right != root and buf.right:
                    buf = buf.right
                if not buf.right:
                    buf.right = root
                    root = root.left
                else:
                    if prev and prev.val > root.val:
                        if not first:
                            first = prev
                        second = root
                    prev = root
                    buf.right = None
                    root = root.right
            else:
                if prev and prev.val > root.val:
                    if not first:
                        first = prev
                    second = root
                prev = root
                root = root.right

        if first:
            first.val, second.val = second.val, first.val