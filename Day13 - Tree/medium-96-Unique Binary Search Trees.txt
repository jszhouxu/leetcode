Unique Binary Search Trees


Description: 

Given n, how many structurally unique BST's (binary search trees) that store values 1 ... n?

Example:

Input: 3
Output: 5
Explanation:
Given n = 3, there are a total of 5 unique BST's:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3





Solution:

用一个字典存储每个n对应的最多BST，key对应n，value对应BST的个数。如果n小于等于2，返回2。从3开始，对一个节点i来说，当其为根节点时，左子树的节点的个数为i-1，（为1,...i-1）,右子树的个数为n-i（为，i+1,...n）。对一个根来说，唯一二叉树的个数为左子树结点的个数乘以右子树的个数。而根节点可以从1到n 中选择。




Code:

class Solution:
    def numTrees(self, n: int) -> int:
        if n <= 2:
            return n
        dp = {0:1,1:1,2:2}
        for i in range(3,n+1):
            res = 0
            for j in range(1,i+1):
                res += dp[j-1] * dp[i-j]
            dp[i] = res
        return dp[n]

        '''
        if n <= 1: return 1
        res = 0
        for i in range(1,n+1):
            res += self.numTrees(i-1) * self.numTrees(n-i)
        return res
        '''
