Reverse Nodes in k-Group


Description: 

Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

Example:

Given this linked list: 1->2->3->4->5

For k = 2, you should return: 2->1->4->3->5

For k = 3, you should return: 3->2->1->4->5

Note:

Only constant extra memory is allowed.
You may not alter the values in the list's nodes, only nodes itself may be changed.





Solution:

遍历整个列表，统计链表长度，每达到k的时候，进行交换（这块没写的出来），否则保持原样。





Code:

class Solution:
    def reverseKGroup(self, head: ListNode, k: int) -> ListNode:
        if head == None:
            return None
        dummy = ListNode(-1)
        dummy.next = head
        tail = dummy
        while head:
            start = head
            count = 0
            while count < k and head:
                head = head.next
                count += 1
            if count == k:
                pre = None
                new_tail = start
                while count>0:
                    nxt = start.next
                    start.next = pre
                    pre = start
                    start =nxt
                    count -= 1
                tail.next = pre
                tail = new_tail
            else:
                tail.next = start
        return dummy.next
            