Remove Nth Node From End of List


Description: 

Given a linked list, rotate the list to the right by k places, where k is non-negative.

Example 1:

Input: 1->2->3->4->5->NULL, k = 2
Output: 4->5->1->2->3->NULL
Explanation:
rotate 1 steps to the right: 5->1->2->3->4->NULL
rotate 2 steps to the right: 4->5->1->2->3->NULL
Example 2:

Input: 0->1->2->NULL, k = 4
Output: 2->0->1->NULL
Explanation:
rotate 1 steps to the right: 2->0->1->NULL
rotate 2 steps to the right: 1->2->0->NULL
rotate 3 steps to the right: 0->1->2->NULL
rotate 4 steps to the right: 2->0->1->NULL




Solution:

首先遍历整个链表，求出其长度n，对k取余。把链表做成头尾循环列表，找到n-k个元素，从其后面一个开始输出，输出n个node结束即可。





Code:

class Solution:
    def rotateRight(self, head: ListNode, k: int) -> ListNode:
        if not head:
            return None
        p = head
        length = 1
        while(p.next):
            p = p.next
            length += 1
        k = k%length
        
        p.next = head
        temp = head
        for _ in range(length-k-1):
            temp = temp.next
        ans = temp.next
        temp.next = None
        
        return ans