Remove Duplicates from Sorted List  


Description: 

Write a program to find the node at which the intersection of two singly linked lists begins.

Notes:
If the two linked lists have no intersection at all, return null.
The linked lists must retain their original structure after the function returns.
You may assume there are no cycles anywhere in the entire linked structure.
Your code should preferably run in O(n) time and use only O(1) memory.





Solution:

因为要求空间复杂度为O(1)，和第一题类似的思想采用两个指针，遍历两个列表。如果长度相等，偏离不到相同的元素那么肯定没有交点。如果长度不等，两个指针遍历完各自链表之后就去遍历另外一个链表，如果有相同元素，总会遍历到的。如果一直没有，两个指针同时达到两个链表的末尾，说明就没有交点。





Code:

class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:
        if headA == None or headB == None:
            return None
        pa = headA
        pb = headB
        
        while pa != pb:
            if pa == None:
                pa = headB
            else:
                pa = pa.next
            if pb == None:
                pb = headA
            else:
                pb = pb.next
        return pa