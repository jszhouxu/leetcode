Evaluate Reverse Polish Notation


Description: 

Evaluate the value of an arithmetic expression in Reverse Polish Notation.

Valid operators are +, -, *, /. Each operand may be an integer or another expression.

Note:

Division between two integers should truncate toward zero.
The given RPN expression is always valid. That means the expression would always evaluate to a result and there won't be any divide by zero operation.
Example 1:

Input: ["2", "1", "+", "3", "*"]
Output: 9
Explanation: ((2 + 1) * 3) = 9
Example 2:

Input: ["4", "13", "5", "/", "+"]
Output: 6
Explanation: (4 + (13 / 5)) = 6
Example 3:

Input: ["10", "6", "9", "3", "+", "-11", "*", "/", "*", "17", "+", "5", "+"]
Output: 22
Explanation: 
  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22




Solution:

从前往后遍历数组，遇到数字就压入栈中，遇到符号，就把栈顶的两个数字拿出来运算，结果再压入栈中，直到遍历完整个数组，栈顶数字即为最终答案。





Code:

class Solution:
    def evalRPN(self, tokens: List[str]) -> int:
        operator = set(["+", "-", "*", "/"])
        stack = []
        for i in tokens:
            if i not in operator:
                stack.append(int(i))
            else:
                second = stack.pop()
                first = stack.pop()
                if i == "+":
                    stack.append(first+second)
                elif i == "-":
                    stack.append(first-second)
                elif i == "*":
                    stack.append(first*second)
                else:
                    if first/second<0:
                        stack.append(math.ceil(first/second))
                    else:
                        stack.append(first//second)
        return stack.pop()
    