Binary Search Tree Iterator


Description: 

Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.

Calling next() will return the next smallest number in the BST.

 

Example:
     7
  3     15
      9    20


BSTIterator iterator = new BSTIterator(root);
iterator.next();    // return 3
iterator.next();    // return 7
iterator.hasNext(); // return true
iterator.next();    // return 9
iterator.hasNext(); // return true
iterator.next();    // return 15
iterator.hasNext(); // return true
iterator.next();    // return 20
iterator.hasNext(); // return false
 

Note:

next() and hasNext() should run in average O(1) time and uses O(h) memory, where h is the height of the tree.
You may assume that next() call will always be valid, that is, there will be at least a next smallest number in the BST when next() is called.





Solution:

可以借助一个栈来做，将树的左半子树按顺序都存入栈中，在算next的时候，只要把当前元素从栈中弹出来，再把其右子树按顺序存入栈中，不停递归调用即可。Hasnext就是直接判断栈是否为空即可。




Code:

class BSTIterator:

    def __init__(self, root):
        self.stack = []
        self.helper(root)
    
    def helper(self, root):
        while root:
            self.stack.append(root)
            root = root.left

    # @return a boolean, whether we have a next smallest number
    def hasNext(self):
        return self.stack  # or self.stack != []

    # @return an integer, the next smallest number
    def next(self):
        node = self.stack.pop()
        self.helper(node.right)
        return node.val