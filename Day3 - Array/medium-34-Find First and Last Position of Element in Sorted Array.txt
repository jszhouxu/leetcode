Find First and Last Position of Element in Sorted Array 


Description: 

Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]





Solution:

用binary search的方法找左右两个指针，找到左右指针后还需要判断一个特殊条件，左边的指针不能是最后一个，且左边指针指向的值为target，那么左边的指针是有效的，否则返回-1，查看右边的指针-1（因为根据binary search找出来的右边的指针是指向target右边一位的值）指向的值是否为target，如是，保留右边的指针，否则返回-1。





Code:

class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        if not nums: return [-1, -1]
        def search_left(target, l, r):
            while (l<r):
                m = (l+r)//2
                if target > nums[m]:
                    l = m+1
                else:
                    r = m
            return l
        def search_right(target, l, r):
            while (l<r):
                m = (l+r)//2
                if target < nums[m]:
                    r = m
                else:
                    l = m+1
            return l
        l, r = 0, len(nums)
        left = search_left(target, l, r)
        right = search_right(target, l , r)
        if 0<= left < len(nums) and nums[left] == target:
            left = left
        else:
            left = -1
        if nums[right-1]==target:
            right = right-1
        else:
            right = -1
        return [left, right]
