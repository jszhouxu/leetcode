Maximum Subarray


Description: 

Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Follow up:

If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.





Solution:

设一个临时存储空间temp存储当前元素之前的已存在的连续元素的和，之后遍历整个数组中的元素，如果temp<0，那么直接把当前元素赋给temp，因为一个负的和永远只会起副作用，如果temp>=0，把当前元素加到temp中去。遍历过程中会出现断断续续的正数和，从里面挑出最大的即可。





Code:

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        temp = nums[0];
        res = nums[0];
        for num in nums[1:]:
            if temp < 0:
                temp = num;
            else:
                temp = temp + num;
            if temp > res:
                res = temp;
        return res