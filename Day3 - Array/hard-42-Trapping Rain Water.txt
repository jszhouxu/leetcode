Trapping Rain Water


Description: 

Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.

Example:

Input: [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6





Solution:

一开始的想法是判断这个数组的升降性，从降序出现的bar开始算一直到升序结束的bar，计算中间存的water，然后继续按先降序后升序的顺序进行遍历，累计每次存的water。这个里面需要注意的是一开始不能是0，必须从第一个非0元素开始统计，然后最后也不能连续是0，只能统计到最后一个非0元素。
后来看了答案，感觉有更好的方法（但是可能也和我的差不多？），双指针l和r 左右同时进行遍历，如果当前左右指针代表的高度为左边高，那么就利用r从右向左遍历，判断右边当前的高度是否比之前存在的最大值高，如果不是，说明是凹进去的部分，计算water在该高度的存量，如果比之前的最大值还大，说明出现了一个新高度，把这个高度赋给r。另外一边同样的处理方法。





Code:

class Solution:
    def trap(self, height: List[int]) -> int:
        ans = 0
        l,r =0,len(height)-1
        l_max,r_max = 0,0
        while l<r:
            if height[l] < height[r]:
                if height[l] >= l_max:
                    l_max = height[l]
                else:
                    ans += l_max - height[l]
                l = l + 1
            else:
                if height[r] >= r_max:
                    r_max = height[r]
                else:
                    ans += r_max - height[r]
                r = r - 1
        return ans